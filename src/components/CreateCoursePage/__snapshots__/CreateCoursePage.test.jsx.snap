// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateCoursePage renders html correctly 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <div>
      <ReduxForm
        courseOptions={{}}
        courseRunOptions={{}}
        currentFormValues={{}}
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="create-course-form"
        getFormState={[Function]}
        id="create-course-form"
        initialValues={{}}
        keepDirtyOnReinitialize={false}
        onSubmit={[Function]}
        onSubmitFail={[Function]}
        organizations={[]}
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        sources={[]}
        submitAsSideEffect={false}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      />
    </div>
  </PageContainer>
</Fragment>
`;

exports[`CreateCoursePage renders page correctly while fetching 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <LoadingSpinner
      message="Loadingâ€¦"
    />
  </PageContainer>
</Fragment>
`;

exports[`CreateCoursePage renders page correctly with course create error 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <div>
      <ReduxForm
        courseOptions={{}}
        courseRunOptions={{}}
        currentFormValues={{}}
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="create-course-form"
        getFormState={[Function]}
        id="create-course-form"
        initialValues={{}}
        isCreating={false}
        keepDirtyOnReinitialize={false}
        onSubmit={[Function]}
        onSubmitFail={[Function]}
        organizations={
          [
            {
              "key": "edx",
              "name": "edX",
            },
            {
              "key": "edx2",
              "name": "edX2",
            },
          ]
        }
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        sources={[]}
        submitAsSideEffect={false}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      />
      <ForwardRef
        dismissible={false}
        id="create-error"
        onClose={[Function]}
        show={true}
        stacked={false}
        transition={
          {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": {
              "appear": false,
              "in": false,
              "mountOnEnter": false,
              "timeout": 300,
              "unmountOnExit": false,
            },
            "render": [Function],
          }
        }
        variant="danger"
      >
        Fail
        <br />
      </ForwardRef>
    </div>
  </PageContainer>
</Fragment>
`;

exports[`CreateCoursePage renders page correctly with course create in progress 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <div>
      <ReduxForm
        courseOptions={{}}
        courseRunOptions={{}}
        currentFormValues={{}}
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="create-course-form"
        getFormState={[Function]}
        id="create-course-form"
        initialValues={{}}
        isCreating={true}
        keepDirtyOnReinitialize={false}
        onSubmit={[Function]}
        onSubmitFail={[Function]}
        organizations={
          [
            {
              "key": "edx",
              "name": "edX",
            },
            {
              "key": "edx2",
              "name": "edX2",
            },
          ]
        }
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        sources={[]}
        submitAsSideEffect={false}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      />
    </div>
  </PageContainer>
</Fragment>
`;

exports[`CreateCoursePage renders page correctly with course create success 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <div>
      <ReduxForm
        courseOptions={{}}
        courseRunOptions={{}}
        currentFormValues={{}}
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="create-course-form"
        getFormState={[Function]}
        id="create-course-form"
        initialValues={{}}
        isCreating={false}
        keepDirtyOnReinitialize={false}
        onSubmit={[Function]}
        onSubmitFail={[Function]}
        organizations={
          [
            {
              "key": "edx",
              "name": "edX",
            },
            {
              "key": "edx2",
              "name": "edX2",
            },
          ]
        }
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        sources={[]}
        submitAsSideEffect={false}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      />
    </div>
  </PageContainer>
</Fragment>
`;

exports[`CreateCoursePage renders page correctly with no publisherUserInfo 1`] = `
<ForwardRef
  dismissible={false}
  id="error"
  onClose={[Function]}
  show={true}
  stacked={false}
  transition={
    {
      "$$typeof": Symbol(react.forward_ref),
      "defaultProps": {
        "appear": false,
        "in": false,
        "mountOnEnter": false,
        "timeout": 300,
        "unmountOnExit": false,
      },
      "render": [Function],
    }
  }
  variant="danger"
>
  <AlertHeading
    as={
      {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      }
    }
    bsPrefix="alert-heading"
  >
    Course Create Form failed to load: 
  </AlertHeading>
  <p>
    User information unavailable
  </p>
</ForwardRef>
`;

exports[`CreateCoursePage renders page correctly with org error 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <div>
      <ReduxForm
        courseOptions={{}}
        courseRunOptions={{}}
        currentFormValues={{}}
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="create-course-form"
        getFormState={[Function]}
        id="create-course-form"
        initialValues={{}}
        isCreating={false}
        keepDirtyOnReinitialize={false}
        onSubmit={[Function]}
        onSubmitFail={[Function]}
        organizations={
          [
            {
              "key": "edx",
              "name": "edX",
            },
            {
              "key": "edx2",
              "name": "edX2",
            },
          ]
        }
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        sources={[]}
        submitAsSideEffect={false}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      />
      <ForwardRef
        dismissible={false}
        id="create-error"
        onClose={[Function]}
        show={true}
        stacked={false}
        transition={
          {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": {
              "appear": false,
              "in": false,
              "mountOnEnter": false,
              "timeout": 300,
              "unmountOnExit": false,
            },
            "render": [Function],
          }
        }
        variant="danger"
      >
        Fail
        <br />
      </ForwardRef>
    </div>
  </PageContainer>
</Fragment>
`;

exports[`CreateCoursePage renders page correctly with organizations 1`] = `
<Fragment>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <title>
      Create a New Course
    </title>
  </HelmetWrapper>
  <ConfirmationModal
    body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
    buttonLabel="Create"
    onClose={[Function]}
    onSubmit={[Function]}
    open={false}
    title="Create a New Course?"
  />
  <PageContainer
    className=""
    wide={false}
  >
    <div>
      <ReduxForm
        courseOptions={{}}
        courseRunOptions={{}}
        currentFormValues={{}}
        destroyOnUnmount={true}
        enableReinitialize={false}
        forceUnregisterOnUnmount={false}
        form="create-course-form"
        getFormState={[Function]}
        id="create-course-form"
        initialValues={{}}
        isCreating={false}
        keepDirtyOnReinitialize={false}
        onSubmit={[Function]}
        onSubmitFail={[Function]}
        organizations={
          [
            {
              "key": "edx",
              "name": "edX",
            },
            {
              "key": "edx2",
              "name": "edX2",
            },
          ]
        }
        persistentSubmitErrors={false}
        pure={true}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        sources={
          [
            {
              "name": "souce1",
              "slug": "source1",
            },
            {
              "name": "source2",
              "slug": "source2",
            },
          ]
        }
        submitAsSideEffect={false}
        touchOnBlur={true}
        touchOnChange={false}
        updateUnregisteredFields={false}
      />
    </div>
  </PageContainer>
</Fragment>
`;
